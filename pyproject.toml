# Defines project metadata, dependencies, and scripts using the Poetry tool.
# This is the central configuration file for the project.
[tool.poetry]
name = "adf1-framework"
version = "0.1.0"
description = "Core orchestration + cockpit guardrails for AADF/translation app"
authors = ["Basil <you@example.com>"]

# Specifies the project's runtime dependencies.
[tool.poetry.dependencies]
# Pin Python to a specific minor version to ensure a consistent runtime environment.
python = "^3.11"

# Declares the build system for PEP 517 compatibility.
# This allows tools like pip to understand how to build the project from source.
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Configures the Ruff linter and formatter for code quality and consistency.
[tool.ruff]
# Match the Black code formatter's default line length for contributor familiarity.
line-length = 88
# Ensure Ruff's rules are compatible with the project's pinned Python version.
target-version = "py311"

# Configures Ruff's integrated import sorter (isort).
[tool.ruff.isort]
# Define this project's own modules to separate them from third-party libraries.
# This is a critical guardrail for organizing imports.
known_first_party = [
    "core",                    # Orchestrator + validators
    "orchestrator",            # Session wiring & intake loops
    "services",                # App-specific business logic
    "api",                     # FastAPI endpoints
    "security",                # Sanitizers, guards
    "utils"                    # Cross-cutting helpers
]
# A style preference to keep 'import as' statements compact.
combine_as_imports = true
# Enforces strict alphabetical ordering within import sections.
# This helps prevent subtle import order issues and potential circular references.
force_sort_within_sections = true

# Application-specific settings for the Translation App, controlled by a feature flag.
[tool.translation_app]
enabled = false
version = "0.1.0"
capabilities = ["get_supported_languages", "translate"]