# PEP 621 standardized project metadata. This is the modern, preferred way
# to declare core information for tools like pip and build.
[project]
name = "adf1-framework"
version = "0.1.0"
description = "Your short package description"
authors = [
    { name = "Basil Example", email = "basil@example.com" }
]
dependencies = [
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.30.1",
    "pydantic>=2.7.1",
    "pydantic-settings>=2.2.1",
    "requests>=2.32.2",
    "httpx>=0.27.0",
    "aiofiles>=23.2.1",
    "python-dotenv>=1.0.1",
    "tenacity>=8.4.1",
    "rich>=13.7.1",
    "loguru>=0.7.2",
    "typing-extensions>=4.12.0",
    "ruff>=0.4.8",
    "isort>=5.13.2",
    "black>=24.4.2",
    "pytest>=8.2.2",
    "pytest-asyncio>=0.23.8",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.1",
    "coverage>=7.5.3"
]
requires-python = ">=3.13"


# Defines project metadata, dependencies, and scripts using the Poetry tool.
# This section is kept for backward compatibility and its dependencies are mirrored.
[tool.poetry]
name = "adf1-framework"
version = "0.1.0"
description = ""
authors = ["Basil <you@example.com>"]

[tool.poetry.dependencies]
python = "^3.13"
fastapi = "^0.111.0"
uvicorn = {version = "^0.30.1", extras = ["standard"]}
pydantic = "^2.7.1"
pydantic-settings = "^2.2.1"
requests = "^2.32.2"
httpx = "^0.27.0"
aiofiles = "^23.2.1"
python-dotenv = "^1.0.1"
tenacity = "^8.4.1"
rich = "^13.7.1"
loguru = "^0.7.2"
typing-extensions = "^4.12.0"
ruff = "^0.4.8"
isort = "^5.13.2"
black = {version = "^24.4.2", allow-prereleases = true}
pytest = "^8.2.2"
pytest-asyncio = "^0.23.8"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.1"
coverage = "^7.5.3"

# Declares the build system for PEP 517 compatibility.
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Configures the Ruff linter and formatter for code quality and consistency.
[tool.ruff]
line-length = 88
target-version = "py313" # Updated to match Python version

# Configures Ruff's integrated import sorter (isort).
[tool.ruff.isort]
known_first_party = [ "core", "orchestrator", "services", "api", "security", "utils" ]
combine_as_imports = true
force_sort_within_sections = true

# Application-specific settings for the Translation App, controlled by a feature flag.
[tool.translation_app]
enabled = false
version = "0.1.0"
capabilities = ["get_supported_languages", "translate"]