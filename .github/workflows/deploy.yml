name: Deploy Application


on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual deployment


jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]


    steps:
    - uses: actions/checkout@v4
   
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
   
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
   
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
   
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
   
    - name: Test with pytest
      run: |
        if [ -d tests ]; then
          pytest tests/ -v --cov=. --cov-report=xml
        else
          echo "No tests directory found, skipping tests"
        fi
   
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella


  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
   
    steps:
    - uses: actions/checkout@v4
   
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
   
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
   
    - name: Create deployment package
      run: |
        mkdir -p dist
        cp -r . dist/
        cd dist
        # Remove unnecessary files
        rm -rf .git .github tests __pycache__ .pytest_cache
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} +
   
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-app
        path: dist/


  # Deploy to staging/development server
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: staging
   
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-app
        path: ./app
   
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging server..."
        # Add your staging deployment commands here
        # For example:
        # rsync -avz ./app/ user@staging-server:/path/to/app/
        # ssh user@staging-server "cd /path/to/app && pip install -r requirements.txt && systemctl restart your-app"
        echo "Staging deployment completed"


  # Deploy to production (only on manual trigger or tagged releases)
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    environment: production
   
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-app
        path: ./app
   
    - name: Deploy to production server
      run: |
        echo "Deploying to production server..."
        # Add your production deployment commands here
        # For example:
        # rsync -avz ./app/ user@production-server:/path/to/app/
        # ssh user@production-server "cd /path/to/app && pip install -r requirements.txt && systemctl restart your-app"
        echo "Production deployment completed"
   
    - name: Notify deployment success
      run: |
        echo "✅ Production deployment successful!"
        # Add notification logic here (Slack, Discord, email, etc.)


  # Docker deployment (optional)
  deploy-docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
   
    steps:
    - uses: actions/checkout@v4
   
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
   
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
   
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

